---
title: "Population Projections 1"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
```



Two editions of the SC ORFA population projections are reviewed and compared. The earlier edition (November 2019) includes population estimates from 2000 to 2018 and projections from 2019 to 2035. The more recent edition (August 2022) includes estimates from 2010 to 2020 and projections from 2021 to 2038. 

Only county total population numbers are relevant to my analyses at this point.

# The 2019 Edition
```{r population-proj-read}
pop19_raw <- readxl::read_excel("SC population projections through 2035_county totals.xls") %>%
  dplyr::filter(!is.na(County)) %>% ## this removes the metadata, pasted below
  dplyr::mutate(`2018 Estimates Total` = as.numeric(`2018 Estimates Total`))
```


## Reformat according to R Tidyverse standards
```{r}
## Make it tidy data
pop19_gender <- pop19_raw %>%
  tidyr::pivot_longer(cols = 3:110, names_to = c("Year", "Type", "Gender"), 
                      values_to = "Population", names_sep=' ') %>%
  dplyr::mutate(Year = as.integer(stringr::str_sub(Year, 1 ,4)),
                Type = stringr::str_sub(Type, end=-2)) %>%
  dplyr::rename(FIPS = 'FIPS code')
```
The RFA population table has `r nrow(pop2019_raw)` rows and `r ncol(pop2019_raw)` columns - a row for each county and a column for each combination of year and gender. Tables with similar numbers of rows and columns, roughly square shaped, are convenient for reading, but a different form is recommended for coding with R. The raw table is reshaped to _long form_ by creating new columns for Year, Type (estimates or projection), Gender (Total, Male, or Female), and Population. This results in `r nrow(pop19)` rows and the following columns: `r scutils::comma_and(names(pop19))`. 

```{r}
## Summarize Totals
pop19 <- pop19_gender %>%
  dplyr::filter(Gender=='Total') %>%
  dplyr::select(-Gender)

```


# The 2022 Edition
```{r}
pop22_raw <- readxl::read_excel("BASE20162020_1yrint_5yragrp_V21_11AUG22.xlsx", skip=2) %>%
  dplyr::filter(!is.na(`COUNTY NAME`)) ## this removes the metadata, pasted below

```

						

## Reformat to R Tidyverse Standards
```{r}
pop22_cohort1 <- pop22_raw %>%
  tidyr::pivot_longer(cols = 4:90, names_to = c("Gender", "Year"), 
                      values_to = "Population", names_sep=1) %>%
  dplyr::mutate(Year = as.integer(stringr::str_sub(Year, 1 ,4)),
                Gender = dplyr::recode(Gender, `T`='Total', 
                                       `F`='Female', M='Male'),
                Type = dplyr::if_else(Year<2021, 'Estimate', 'Projection')) %>%
  dplyr::rename(County='COUNTY NAME', FIPS='COUNTY FIPS')

## Calculate State-wide populations
pop22_cohort_statewide <- pop22_cohort1 %>%
  dplyr::group_by(`AGE GROUP`, Gender, Year, Type) %>%
  dplyr::summarise(Population = sum(Population),
                   County = "SOUTH CAROLINA")

pop22_cohort <- dplyr::bind_rows(pop22_cohort1, pop22_cohort_statewide) |>
  dplyr::rename(Age = `AGE GROUP`) |>
  dplyr::mutate(Age = Age |> 
                  stringr::str_to_upper() |>
                  stringr::str_replace(' TO ', '-') |>
                  forcats::fct_inorder())

```


## Summarize Total Populations Across Cohorts
```{r}
pop22_gender <- pop22_cohort %>%
  dplyr::group_by(FIPS, County, Year, Type, Gender) %>%
  dplyr::summarise(Population=sum(Population), .groups='drop')

pop22 <- pop22_gender %>%
  dplyr::filter(Gender=='Total') %>%
  dplyr::select(-Gender)
```


```{r}
usethis::use_data(pop19_gender, overwrite=T)
usethis::use_data(pop19, overwrite=T)
usethis::use_data(pop22_gender, overwrite=T)
usethis::use_data(pop22_cohort, overwrite=T)
usethis::use_data(pop22, overwrite=T)

```
